# Generated by Django 5.2.5 on 2025-08-07 14:37

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('players', '0001_initial'),
        ('teams', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='RosterPosition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('abbreviation', models.CharField(max_length=10)),
                ('is_starting', models.BooleanField(default=True)),
                ('max_players', models.PositiveIntegerField(default=1)),
            ],
            options={
                'ordering': ['is_starting', 'name'],
            },
        ),
        migrations.CreateModel(
            name='League',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('max_teams', models.PositiveIntegerField(default=12, validators=[django.core.validators.MinValueValidator(4), django.core.validators.MaxValueValidator(20)])),
                ('roster_size', models.PositiveIntegerField(default=23)),
                ('starting_lineup_size', models.PositiveIntegerField(default=9)),
                ('scoring_system', models.CharField(choices=[('points', 'Points Only'), ('categories', 'Categories'), ('rotisserie', 'Rotisserie'), ('head_to_head', 'Head-to-Head')], default='points', max_length=20)),
                ('draft_type', models.CharField(choices=[('snake', 'Snake Draft'), ('linear', 'Linear Draft'), ('auction', 'Auction Draft')], default='snake', max_length=20)),
                ('draft_date', models.DateTimeField(blank=True, null=True)),
                ('is_drafted', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('is_public', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('commissioner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='commissioner_leagues', to=settings.AUTH_USER_MODEL)),
                ('season', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fantasy_leagues', to='teams.season')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='FantasyWeek',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('week_number', models.PositiveIntegerField()),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('is_playoffs', models.BooleanField(default=False)),
                ('league', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='weeks', to='fantasy.league')),
            ],
            options={
                'ordering': ['week_number'],
                'unique_together': {('league', 'week_number')},
            },
        ),
        migrations.CreateModel(
            name='FantasyTeam',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('logo_url', models.URLField(blank=True)),
                ('wins', models.PositiveIntegerField(default=0)),
                ('losses', models.PositiveIntegerField(default=0)),
                ('ties', models.PositiveIntegerField(default=0)),
                ('total_points', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fantasy_teams', to=settings.AUTH_USER_MODEL)),
                ('league', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='teams', to='fantasy.league')),
            ],
            options={
                'ordering': ['-total_points'],
                'unique_together': {('owner', 'league')},
            },
        ),
        migrations.CreateModel(
            name='FantasyScoring',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('goals_points', models.DecimalField(decimal_places=2, default=6.0, max_digits=5)),
                ('assists_points', models.DecimalField(decimal_places=2, default=4.0, max_digits=5)),
                ('plus_minus_points', models.DecimalField(decimal_places=2, default=1.0, max_digits=5)),
                ('penalty_minutes_points', models.DecimalField(decimal_places=2, default=0.5, max_digits=5)),
                ('power_play_goals_points', models.DecimalField(decimal_places=2, default=1.0, max_digits=5)),
                ('power_play_assists_points', models.DecimalField(decimal_places=2, default=0.5, max_digits=5)),
                ('short_handed_goals_points', models.DecimalField(decimal_places=2, default=2.0, max_digits=5)),
                ('short_handed_assists_points', models.DecimalField(decimal_places=2, default=1.0, max_digits=5)),
                ('shots_on_goal_points', models.DecimalField(decimal_places=2, default=0.4, max_digits=5)),
                ('hits_points', models.DecimalField(decimal_places=2, default=0.6, max_digits=5)),
                ('blocked_shots_points', models.DecimalField(decimal_places=2, default=1.0, max_digits=5)),
                ('wins_points', models.DecimalField(decimal_places=2, default=4.0, max_digits=5)),
                ('losses_points', models.DecimalField(decimal_places=2, default=-1.0, max_digits=5)),
                ('goals_against_points', models.DecimalField(decimal_places=2, default=-1.0, max_digits=5)),
                ('saves_points', models.DecimalField(decimal_places=2, default=0.6, max_digits=5)),
                ('shutouts_points', models.DecimalField(decimal_places=2, default=5.0, max_digits=5)),
                ('league', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='scoring_settings', to='fantasy.league')),
            ],
        ),
        migrations.CreateModel(
            name='Roster',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('fantasy_team', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='roster', to='fantasy.fantasyteam')),
            ],
        ),
        migrations.CreateModel(
            name='Trade',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('accepted', 'Accepted'), ('rejected', 'Rejected'), ('cancelled', 'Cancelled'), ('completed', 'Completed')], default='pending', max_length=20)),
                ('proposed_date', models.DateTimeField(auto_now_add=True)),
                ('response_date', models.DateTimeField(blank=True, null=True)),
                ('completion_date', models.DateTimeField(blank=True, null=True)),
                ('message', models.TextField(blank=True)),
                ('from_team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trades_sent', to='fantasy.fantasyteam')),
                ('to_team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trades_received', to='fantasy.fantasyteam')),
            ],
            options={
                'ordering': ['-proposed_date'],
            },
        ),
        migrations.CreateModel(
            name='TradePlayer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('from_team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='traded_away', to='fantasy.fantasyteam')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='players.player')),
                ('to_team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='traded_for', to='fantasy.fantasyteam')),
                ('trade', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='players', to='fantasy.trade')),
            ],
        ),
        migrations.CreateModel(
            name='Matchup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('team1_score', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('team2_score', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('is_complete', models.BooleanField(default=False)),
                ('team1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='matchups_as_team1', to='fantasy.fantasyteam')),
                ('team2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='matchups_as_team2', to='fantasy.fantasyteam')),
                ('week', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='matchups', to='fantasy.fantasyweek')),
            ],
            options={
                'unique_together': {('week', 'team1', 'team2')},
            },
        ),
        migrations.CreateModel(
            name='PlayerFantasyStats',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('games_played', models.PositiveIntegerField(default=0)),
                ('goals', models.PositiveIntegerField(default=0)),
                ('assists', models.PositiveIntegerField(default=0)),
                ('plus_minus', models.IntegerField(default=0)),
                ('penalty_minutes', models.PositiveIntegerField(default=0)),
                ('power_play_goals', models.PositiveIntegerField(default=0)),
                ('power_play_assists', models.PositiveIntegerField(default=0)),
                ('short_handed_goals', models.PositiveIntegerField(default=0)),
                ('short_handed_assists', models.PositiveIntegerField(default=0)),
                ('shots_on_goal', models.PositiveIntegerField(default=0)),
                ('hits', models.PositiveIntegerField(default=0)),
                ('blocked_shots', models.PositiveIntegerField(default=0)),
                ('wins', models.PositiveIntegerField(default=0)),
                ('losses', models.PositiveIntegerField(default=0)),
                ('goals_against', models.PositiveIntegerField(default=0)),
                ('saves', models.PositiveIntegerField(default=0)),
                ('shutouts', models.PositiveIntegerField(default=0)),
                ('total_fantasy_points', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('fantasy_team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='player_weekly_stats', to='fantasy.fantasyteam')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fantasy_stats', to='players.player')),
                ('week', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='player_stats', to='fantasy.fantasyweek')),
            ],
            options={
                'ordering': ['-total_fantasy_points'],
                'unique_together': {('player', 'week', 'fantasy_team')},
            },
        ),
        migrations.CreateModel(
            name='RosterSlot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('player', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='players.player')),
                ('position', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fantasy.rosterposition')),
                ('roster', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='slots', to='fantasy.roster')),
            ],
            options={
                'unique_together': {('roster', 'position', 'player')},
            },
        ),
    ]
